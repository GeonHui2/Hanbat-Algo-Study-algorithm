import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int N;
    static boolean[] visited;
    static String[] com;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());

        for (int i = 0; i < N; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int A = Integer.parseInt(st.nextToken());
            int B = Integer.parseInt(st.nextToken());
            visited = new boolean[10000];
            com = new String[10000];

            Arrays.fill(com, "");

            bfs(A, B);

            System.out.println(com[B]);
        }
    }

    public static void bfs(int a, int b) {
        Queue<Integer> q = new LinkedList<>();
        q.add(a);
        visited[a] = true;

        while (!q.isEmpty()) {
            int cur = q.poll();

            if (cur == b) {
                break;
            }

            int D = (cur * 2) % 10000;
            int S = cur - 1;

            if (cur == 0) S = 9999;

            int L = (cur % 1000) * 10 + cur / 1000;
            int R = (cur % 10) * 1000 + cur / 10;

            if (!visited[D]) {
                visited[D] = true;
                q.offer(D);
                com[D] = com[cur] + "D";
            }

            if (!visited[S]) {
                visited[S] = true;
                q.offer(S);
                com[S] = com[cur] + "S";
            }

            if (!visited[L]) {
                visited[L] = true;
                q.offer(L);
                com[L] = com[cur] + "L";
            }

            if (!visited[R]) {
                visited[R] = true;
                q.offer(R);
                com[R] = com[cur] + "R";
            }
        }
    }
}
